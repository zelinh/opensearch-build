lib = library(identifier: 'jenkins@20211123', retriever: legacySCM(scm))

pipeline {
    agent {
        docker {
            label 'Jenkins-Agent-al2-x64-c54xlarge-Docker-Host'
            image 'opensearchstaging/ci-runner:centos7-x64-arm64-jdkmulti-node10.24.1-cypress6.9.1-20211130'
            alwaysPull true
        }
    }
    parameters {
        string(
            name: 'BUILD_ID',
            description: 'Build ID of the OpenSearch distribution artifacts to be staged.',
            trim: true
        )
        string(
            name: 'VERSION',
            description: 'Version of the OpenSearch distribution artifacts to be staged.',
            trim: true
        )
    }
    stages {
        stage('manifest fetch') {
            steps {
                script {
                    manifest_path = "distribution-build-opensearch/${VERSION}/${BUILD_ID}/linux/x64/builds/opensearch/manifest.yml"
                    downloadFromS3(
                        destPath: "$WORKSPACE/builds/opensearch/manifest.yml",
                        bucket: "${ARTIFACT_BUCKET_NAME}",
                        path: "${manifest_path}",
                        force: true
                    )
                    echo "I'm here just downloaded the manifest"
                    sh """
                        ls $WORKSPACE/builds/opensearch
                        cat $WORKSPACE/builds/opensearch/manifest.yml
                    """
                    String buildManifest = "builds/opensearch/manifest.yml"
                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: buildManifest))
                    String buildManifestId = buildManifestObj.getArtifactBuildId()
                    echo "$buildManifestId"
                    String opensearchCommitId = buildManifestObj.getCommitId()
                    echo "$opensearchCommitId"
                    def componentsName = buildManifestObj.getComponets().size()
                    echo "$componentsName"
/*                     createReleaseTag(
                        buildManifest: buildManifest
                    ) */
                }
            }
        }
    }
    post() {
        always {
            script {
                postCleanup()
            }
        }
    }
}

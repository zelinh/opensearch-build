/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 *
 * The OpenSearch Contributors require contributions made to
 * this file be licensed under the Apache-2.0 license or a
 * compatible open source license.
 */

lib = library(identifier: 'jenkins@smoke-test', retriever: modernSCM([
    $class: 'GitSCMSource',
    remote: 'https://github.com/zelinh/opensearch-build-libraries.git',
]))

def docker_images = [
    'tar': 'opensearchstaging/ci-runner:ci-runner-al2-opensearch-build-v1',
    'rpm': 'opensearchstaging/ci-runner:ci-runner-almalinux8-systemd-base-integtest-v1',
    'deb': 'opensearchstaging/ci-runner:ci-runner-ubuntu2004-systemd-base-integtest-v3',
    'zip': 'opensearchstaging/ci-runner:ci-runner-windows2019-opensearch-build-v1',
]

def docker_args = [
    'tar': '-u 1000 --cpus 4 -m 16g',
    'rpm': '--entrypoint=/usr/lib/systemd/systemd -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host --cpus 4 -m 16g',
    'deb': '--entrypoint=/usr/lib/systemd/systemd -u root --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:rw --cgroupns=host --cpus 4 -m 16g',
    'zip': '-u ContainerAdministrator',
]

def agent_nodes = [
    'linux_x64': 'Jenkins-Agent-AL2023-X64-M54xlarge-Docker-Host',
    'linux_arm64': 'Jenkins-Agent-AL2023-Arm64-M6g4xlarge-Docker-Host',
    'windows_x64': 'Jenkins-Agent-Windows2019-X64-M54xlarge-Docker-Host',
]

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
        buildDiscarder(logRotator(daysToKeepStr: '60'))
    }
    agent none
    environment {
        BUILD_MANIFEST = 'build-manifest.yml'
        BUILD_JOB_NAME = 'distribution-build-opensearch'
        ARTIFACT_BUCKET_NAME = credentials('jenkins-artifact-bucket-name')
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. index-management geospatial ...) separated by space, will test with "--component ...", else test everything in the TEST_MANIFEST..',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL for OpenSearch, e.g. "https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/2.9.0/8172/linux/x64/tar/builds/opensearch/manifest.yml".',
            trim: true
        )
        string(
            name: 'RC_NUMBER',
            description: 'The RC build count. Default is 0 which means its not an RC build.',
            defaultValue: '0'
        )
    }
    stages {
        stage('verify-parameters') {
            agent { label agent_nodes['linux_x64'] }
            steps {
                script {
                    if (TEST_MANIFEST == '' || !fileExists("manifests/${TEST_MANIFEST}")) {
                        currentBuild.result = 'ABORTED'
                        error("Smoke Tests failed to start. Test manifest was not provided or not found in manifests/${TEST_MANIFEST}.")
                    }

                    if (BUILD_MANIFEST_URL == '') {
                        currentBuild.result = 'ABORTED'
                        error('Smoke Tests failed to start. Build manifest url was not provided.')
                    }
                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    env.architecture = buildManifestObj.getArtifactArchitecture()
                    env.buildId = buildManifestObj.getArtifactBuildId()
                    env.distribution = buildManifestObj.getDistribution()
                    env.version = buildManifestObj.build.version
                    env.platform = buildManifestObj.build.platform
                    env.artifactPath = buildManifestObj.getArtifactRoot(BUILD_JOB_NAME, buildId)
                    env.AGENT_LABEL = agent_nodes["${env.platform}_${architecture}"]
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('smoke-test') {
            // Need to run this directly on agent node here in order to trigger stages with docker container and avoid docker within docker situation
            // Can only be run in runner that is at least 50GB per container
            agent { label AGENT_LABEL }
            steps {
                script {
                    downloadBuildManifest(
                        url: BUILD_MANIFEST_URL,
                        path: BUILD_MANIFEST
                    )

                    def buildManifestObj = lib.jenkins.BuildManifest.new(readYaml(file: BUILD_MANIFEST))
                    def testManifestObj = lib.jenkins.TestManifest.new(readYaml(file: "manifests/${TEST_MANIFEST}"))
                    def componentDefaultList = testManifestObj.getComponentNames()
                    def componentsInBuildManifest = buildManifestObj.getNames()
                    def componentList = COMPONENT_NAME ? COMPONENT_NAME.trim().split(' ') as List : componentDefaultList
                    String switch_user_non_root = (distribution.equals('rpm') || distribution.equals('deb')) ? 'true' : 'false'
                    echo "switch_user_non_root: ${switch_user_non_root}"

                    for (component_check in componentList) {
                        if (!componentDefaultList.contains(component_check)) {
                            error("${component_check} is not present in the test manifest: ${TEST_MANIFEST}")
                        }
                        if (!componentsInBuildManifest.contains(component_check)) {
                            echo "Skipping tests for ${component_check} as is not present in the provided build manifest."
                            componentList -= component_check
                        }
                        if ((distribution.equals('rpm') || distribution.equals('deb')) && component_check.equals('cross-cluster-replication')) {
                            echo "Skipping tests for ${distribution} distribution for cross-cluster-replication"
                            componentList -= component_check
                        }
                    }
                    echo "Testing components: ${componentList}"
                    currentBuild.description = "$TEST_MANIFEST, $version, $architecture, $platform, $buildId, $distribution, $componentList"

                    // Stash the current working directory files, aka opensearch-build repo
                    // Unstash later in each triggered stage to run integTest
                    stash includes: '**', name: "smoketest-opensearch-$BUILD_NUMBER"

                    timeout(time: 2, unit: 'HOURS') {
                        node(AGENT_LABEL) {
                            docker.withRegistry('https://public.ecr.aws/') {
                                docker.image(docker_images["$distribution"]).inside(docker_args["$distribution"]) {
                                    try {
                                        stage("Smoke_tests") {
                                            // Jenkins tend to not clean up workspace at times even though ws clean is called
                                            // Docker is mounting the agent directory so it can communicate with the agent
                                            // this sometimes causes the workspace to retain last run test-results and ends with build failures
                                            // https://github.com/opensearch-project/opensearch-build/blob/6ed1ce3c583233eae4fe1027969d778cfc7660f7/src/test_workflow/test_recorder/test_recorder.py#L99
                                            unstash "smoketest-opensearch-$BUILD_NUMBER"
                                            sh('rm -rf test-results')
                                            runSmokeTestScript(
                                                jobName: "$BUILD_JOB_NAME",
                                                componentName: "${COMPONENT_NAME}",
                                                buildManifest: "$BUILD_MANIFEST",
                                                testManifest: "manifests/${TEST_MANIFEST}",
                                                localPath: "${WORKSPACE}/${distribution}",
                                                switchUserNonRoot: "${switch_user_non_root}",
                                                buildId: "${buildId}"
                                            )
                                        }
                                    } catch (e) {
                                        throw new Exception("Error running Smoke test", e)
                                    } finally {
                                        echo "Completed running smoke tests."
                                        postCleanup()
                                    }
                                }
                            }
                        }
                    }
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
    }
    post {
        always {
            node(AGENT_LABEL) {
                script {
                    postCleanup()
                }
            }
        }
    }
}

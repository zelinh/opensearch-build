lib = library(identifier: "jenkins@20211123", retriever: legacySCM(scm))

pipeline {
    options {
        timeout(time: 4, unit: 'HOURS')
    }
    agent none
    environment {
        AGENT_X64 = 'Jenkins-Agent-AL2-X64-C54xlarge-Docker-Host'
        AGENT_ARM64 = 'Jenkins-Agent-AL2-Arm64-C6g4xlarge-Docker-Host'
        IMAGE_RPM = 'opensearchstaging/ci-runner:ci-runner-rockylinux8-opensearch-build-v2' // required for rpm to create digest sha256 correctly with rpm 4.12+
    }
    parameters {
        string(
            name: 'COMPONENT_NAME',
            description: 'If this field contains one or more component names (e.g. OpenSearch common-utils ...), will build with "--component <COMPONENT_NAME> ...", else build everything in the INPUT_MANIFEST.',
            trim: true
        )
        string(
            name: 'INPUT_MANIFEST',
            description: 'Input manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0.yml.',
            trim: true
        )
        string(
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. 2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            name: 'INTEG_TEST_JOB_NAME',
            description: "Name of integration test job that will be triggered, e.g. Playground/integ-test. A non-null empty value here will skip integration tests.",
            defaultValue: "integ-test",
            trim: true
        )
        string(
            name: 'BWC_TEST_JOB_NAME',
            description: "Name of backwards compatibility test job that will be triggered, e.g. Playground/bwc-test.  A non-null empty value here will skip BWC tests.",
            defaultValue: "bwc-test",
            trim: true
        )
        choice(
            name: 'BUILD_DOCKER',
            description: 'Build docker image or not with options.',
            choices: ['build_docker', 'build_docker_with_build_number_tag', 'do_not_build_docker'],
        )
        booleanParam(
            name: 'PUBLISH_NOTIFICATION',
            description: 'Publish the status of this build job or not.',
            defaultValue: true
        )
    }
    stages {
        stage('detect docker image + args') {
            agent {
                docker {
                    label AGENT_X64
                    image 'alpine:3'
                    alwaysPull true
                }
            }
            steps {
                script {
                    dockerAgent = detectDockerAgent()
                    currentBuild.description = INPUT_MANIFEST
                }
            }
        }
        stage('Initialize the commit yaml report') {
            agent {
                docker {
                    label AGENT_X64
                    image dockerAgent.image
                    alwaysPull true
                }
            }
            steps {
                script {
                    def inputManifestFile = "$INPUT_MANIFEST"
                    echo("input file is $inputManifestFile")
                    yamlUpdate(
                        componentName: COMPONENT_NAME,
                        inputManifest: "manifests/$INPUT_MANIFEST",
                        outputFile: "commits.yml",
                        status: "NOT_STARTED",
                        stage: "START"
                    )
                    stash includes: "commits.yml", name: "commits_manifest"
                }
            }
            post {
                always {
                    postCleanup()
                }
            }
        }
        stage('build') {
            parallel {
                stage('build-and-test-x64-tar') {
                    agent {
                        docker {
                            label AGENT_X64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            echo ("build-and-test-x64-tar success")
                               def integTestResults =
                                   build job: 'integ-test',
                                   propagate: false,
                                   wait: true,
                                   parameters: [
                                       string(name: 'TEST_MANIFEST', value: "111"),
                                       string(name: 'BUILD_MANIFEST_URL', value: "buildManifestUrl"),
                                       string(name: 'AGENT_LABEL', value: AGENT_X64)
                                   ]
                               yamlUpdate(
                                   componentName: COMPONENT_NAME,
                                   inputManifest: "commits.yml",
                                   outputFile: "$outputFile",
                                   status: integTestResults.getId(),
                                   stage: "integ_test"
                               )
                               echo ("${integTestResults.getId()} + integ number")
                        }
                    }
                    post {
                        always {      
                            script {
                                unstash "commits_manifest"
                                def outputFile = "$WORKSPACE/commits.yml"
                                yamlUpdate(
                                    componentName: COMPONENT_NAME,
                                    inputManifest: "commits.yml",
                                    outputFile: "$outputFile",
                                    status: "succeed",
                                    stage: "x64_tar"
                                )
                                stash includes: "commits.yml", name: "commits_manifest"
                                postCleanup()
                            }
                        }
                    }
                }
                stage('build-and-test-x64-rpm') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-x64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    echo ("Build and test x64_rpm")
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-x64-rpm') {
                            agent {
                                docker {
                                    label AGENT_X64
                                    image IMAGE_RPM
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    echo("assemble archive x64 rpm")
                                    sleep 10
                                }
                            }
                            post {
                                success {
                                    unstash "commits_manifest"
                                    yamlUpdate(
                                        componentName: COMPONENT_NAME,
                                        inputManifest: "commits.yml",
                                        outputFile: "commits.yml",
                                        status: "Succeed",
                                        stage: "x64_rpm"
                                    )
                                    stash includes: "commits.yml", name: "commits_manifest"
                                }
                                failure {
                                    unstash "commits_manifest"
                                    yamlUpdate(
                                        componentName: COMPONENT_NAME,
                                        inputManifest: "commits.yml",
                                        outputFile: "commits.yml",
                                        status: "Failed",
                                        stage: "x64_rpm"
                                    )
                                    stash includes: "commits.yml", name: "commits_manifest"
                                }
                                always {
                                    postCleanup()
                                }
                            }
                        }
                    }
                }
                stage('build-and-test-arm64-tar') {
                    agent {
                        docker {
                            label AGENT_ARM64
                            image dockerAgent.image
                            args dockerAgent.args
                            alwaysPull true
                        }
                    }
                    steps {
                        script {
                            echo ("build and test arm64 tarball.")
                            sleep 20
                        }
                    }
                    post {
                        always {
                            script {
                                unstash "commits_manifest"
                                yamlUpdate(
                                    componentName: COMPONENT_NAME,
                                    inputManifest: "commits.yml",
                                    outputFile: "commits.yml",
                                    status: "succeed",
                                    stage: "arm64_tar"
                                )
                                stash includes: "commits.yml", name: "commits_manifest"
                                postCleanup()
                            }
                        }
                    }
                }
                stage('build-and-test-arm64-rpm') {
                    agent { label AGENT_X64 }
                    stages {
                        stage('build-archive-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image dockerAgent.image
                                    args dockerAgent.args
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    echo("Build archive arm64")
                                }
                            }
                            post {
                                always {
                                    postCleanup()
                                }
                            }
                        }
                        stage('assemble-archive-and-test-linux-arm64-rpm') {
                            agent {
                                docker {
                                    label AGENT_ARM64
                                    image IMAGE_RPM
                                    alwaysPull true
                                }
                            }
                            steps {
                                script {
                                    echo("archive rpm arm64.")
                                    sleep 40
//                                     error("force fail")
                                }
                            }
                            post {
                                success {
                                    unstash "commits_manifest"
                                    yamlUpdate(
                                        componentName: COMPONENT_NAME,
                                        inputManifest: "commits.yml",
                                        outputFile: "commits.yml",
                                        status: "SUCCESS",
                                        stage: "arm64_rpm"
                                    )
                                    stash includes: "commits.yml", name: "commits_manifest"
                                }
                                failure {
                                    unstash "commits_manifest"
                                    yamlUpdate(
                                        componentName: COMPONENT_NAME,
                                        inputManifest: "commits.yml",
                                        outputFile: "commits.yml",
                                        status: "FAILURE",
                                        stage: "arm64_rpm"
                                    )
                                    stash includes: "commits.yml", name: "commits_manifest"
                                }
                                always {
                                    postCleanup()
                                }
                            }
                        }
                    }
                }
            }
        }
//         stage("Finalize the buildInfo yaml") {
//             agent {
//                 docker {
//                     label AGENT_X64
//                     image dockerAgent.image
//                     alwaysPull true
//                 }
//             }
//             steps {
//                 script {
//                     unstash "commits_manifest"
//                     yamlUpdate(
//                         componentName: COMPONENT_NAME,
//                         inputManifest: "commits.yml",
//                         outputFile: "commits.yml",
//                         status: currentBuild.currentResult,
//                         stage: "COMPLETE"
//                     )
//                     archiveArtifacts artifacts: 'commits.yml'
//                 }
//             }
//             post {
//                 always {
//                     postCleanup()
//                 }
//             }
//         }
    }
    post {
        always {
//             agent {
//                 docker {
//                     label AGENT_X64
//                     image 'opensearchstaging/ci-runner:ci-runner-centos7-opensearch-build-v2'
//                     alwaysPull true
//                 }
//             }
            node(AGENT_X64) {
                script {
                    unstash "commits_manifest"
                    yamlUpdate(
                        componentName: COMPONENT_NAME,
                        inputManifest: "commits.yml",
                        outputFile: "commits.yml",
                        status: currentBuild.result,
                        stage: "COMPLETE"
                    )
                    archiveArtifacts artifacts: 'commits.yml'
                    postCleanup()
                }
            }
        }
        success {
            node(AGENT_X64) {
                script {
                    echo("SUCCESS")
                    postCleanup()
                }
            }
        }
        failure {
            node(AGENT_X64) {
                script {
                echo ("FAILURE")
                    postCleanup()
                }
            }
        }
    }
}

